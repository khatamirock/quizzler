const setup=document.getElementById("setup"),quiz=document.getElementById("quiz"),results=document.getElementById("results"),startButton=document.getElementById("startQuiz"),submitButton=document.getElementById("submit"),restartButton=document.getElementById("restart");let currentQuestions=[],score=0;const topicSelect=document.getElementById("topic"),subtopicSelect=document.getElementById("subtopic");function updateSubtopics(){const e=topicSelect.value;subtopicSelect.innerHTML="",subtopicSelect.disabled=!0;const t=document.getElementById("subtopicLoading");e?(t.style.display="inline-block",fetch(`/api/questions/subtopics/${e}`).then((e=>e.json())).then((t=>{if(console.log("Received subtopics:",t),Object.keys(t).length>0){const o=new Set;for(const[n,s]of Object.entries(t)){const t=document.createElement("div");t.className="subset-container";const i=s[0].info||"No extra info added",a=document.createElement("span");a.textContent=`Subset: ${n} - ${i}`,t.appendChild(a);const c=createDeleteButton(n,e);t.appendChild(c),subtopicSelect.appendChild(t),s.forEach((e=>{if(!o.has(e.name)){const t=document.createElement("div");t.className="subtopic-option",t.dataset.value=e.name,t.textContent=`Start Exam -${i} - Total(${e.count} questions)`,e.info&&(t.dataset.info=e.info),subtopicSelect.appendChild(t),o.add(e.name)}}))}subtopicSelect.disabled=!1}else{const e=document.createElement("div");e.className="subtopic-option",e.dataset.value="default",e.textContent="No subtopics available",subtopicSelect.appendChild(e)}})).catch((e=>{console.error("Error fetching subtopics:",e);const t=document.createElement("div");t.className="subtopic-option",t.dataset.value="error",t.textContent="Error loading subtopics",subtopicSelect.appendChild(t)})).finally((()=>{t.style.display="none"}))):t.style.display="none"}function createDeleteButton(e,t){const o=document.createElement("button");return o.textContent="Delete",o.className="delete-subset-btn",o.onclick=o=>{o.preventDefault();const n=prompt("Please enter the admin password to delete this subset:");n&&deleteSubset(t,e,n)},o}async function deleteSubset(e,t,o){try{const n=await fetch(`/api/questions/delete-subset/${e}/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({password:o})});if(n.ok)console.log(`Subset ${t} deleted successfully for topic ${e}`),updateSubtopics();else{const e=await n.json();console.error("Failed to delete subset:",e.error),alert(e.error||"Failed to delete subset")}}catch(e){console.error("Error deleting subset:",e),alert("Error deleting subset")}}let quizStartTime,quizDuration,timerInterval;topicSelect.addEventListener("change",updateSubtopics),startButton.addEventListener("click",startQuiz),submitButton.addEventListener("click",submitQuiz),restartButton.addEventListener("click",restartQuiz);let selectedQuestionCount=5;function startQuiz(){console.log("startQuiz function called");const e=topicSelect.value,t=document.querySelector(".subtopic-option.selected"),o=t?t.dataset.value:"";if(console.log("Selected topic:",e),console.log("Selected subtopic:",o),console.log("Selected question count:",selectedQuestionCount),!e||!o&&subtopicSelect.children.length>1)return void alert("Please select a topic and subtopic (if available)");const n="default"===o?"":`/${o}`,s=(new Date).getTime(),i=`/api/questions/${e}${n}/${selectedQuestionCount}?t=${s}`;console.log("Fetching questions from:",i),fetch(i,{cache:"no-store"}).then((e=>{if(console.log("Response status:",e.status),!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return e.json()})).then((e=>{if(console.log("Received questions:",e),!Array.isArray(e)||0===e.length)throw new Error("No questions received");currentQuestions=e,score=0,setup.style.display="none",quiz.style.display="block",results.style.display="none",displayQuestions(),updateScore(),startTimer(),setupStickyTimer()})).catch((e=>{console.error("Error starting quiz:",e),alert("Failed to start quiz. Please try again. Error: "+e.message)}))}function displayQuestions(){const e=document.getElementById("questions");e.innerHTML="",currentQuestions.forEach(((t,o)=>{const n=document.createElement("div");n.className="question",n.innerHTML=`\n            <h3>Question ${o+1}: ${t.question_text}</h3>\n            <div class="options">\n                ${t.options.map((e=>`\n                    <div class="option" data-value="${e.value}">\n                        ${e.text}\n                    </div>\n                `)).join("")}\n            </div>\n            <button class="suggest-correction" data-question-id="${t._id}">Suggest Correction</button>\n            <button class="delete-question" data-question-id="${t._id}">Delete Question</button>\n        `,e.appendChild(n)})),document.querySelectorAll(".option").forEach((e=>{e.addEventListener("click",(()=>selectOption(e)))})),document.querySelectorAll(".suggest-correction").forEach((e=>{e.addEventListener("click",(()=>suggestCorrection(e.dataset.questionId)))})),document.querySelectorAll(".delete-question").forEach((e=>{e.addEventListener("click",(()=>deleteQuestion(e.dataset.questionId)))}))}function suggestCorrection(e){const t=currentQuestions.find((t=>t._id===e)),o=document.querySelector(`[data-question-id="${e}"]`).closest(".question"),n=document.querySelector(".modal");n&&n.remove();const s=document.createElement("div");s.className="modal",s.innerHTML=`\n        <div class="modal-content">\n            <h2>Suggest Correction</h2>\n            <p>Question: ${t.question_text}</p>\n            <form id="correctionForm">\n                <div id="optionsContainer">\n                    ${t.options.map(((e,t)=>`\n                        <div class="option-edit">\n                            <label for="option${t}">Option ${e.value}:</label>\n                            <input type="text" id="option${t}" value="${e.text}" required>\n                        </div>\n                    `)).join("")}\n                </div>\n                <label for="correctedAnswer">Correct Answer:</label>\n                <select id="correctedAnswer" required>\n                    ${t.options.map((e=>`\n                        <option value="${e.value}" ${e.value===t.correct_answer?"selected":""}>\n                            ${e.value}\n                        </option>\n                    `)).join("")}\n                </select>\n                <button type="submit">Submit Correction</button>\n                <button type="button" id="cancelCorrection">Cancel</button>\n            </form>\n        </div>\n    `,o.insertAdjacentElement("afterend",s),document.getElementById("correctionForm").addEventListener("submit",(t=>{t.preventDefault(),submitOptionCorrection(e)})),document.getElementById("cancelCorrection").addEventListener("click",(()=>{s.remove()}))}function submitOptionCorrection(e){const t=Array.from(document.querySelectorAll(".option-edit input")).map(((e,t)=>({value:String.fromCharCode(97+t),text:e.value}))),o=document.getElementById("correctedAnswer").value,n=topicSelect.value,s=prompt("Please enter the admin password to submit the correction:");s?(console.log("Submitting correction:",{questionId:e,correctedOptions:t,correctedAnswer:o,topic:n}),fetch("/api/questions/suggest-option-correction",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({questionId:e,correctedOptions:t,correctedAnswer:o,topic:n,password:s})}).then((e=>e.ok?e.json():e.json().then((e=>{throw new Error(e.message||"Unknown error occurred")})))).then((e=>{console.log("Question updated successfully:",e),alert("Question updated successfully!");const t=document.querySelector(".modal");t&&t.remove(),startQuiz()})).catch((e=>{console.error("Error updating question:",e),alert(`Failed to update question: ${e.message}`)}))):alert("Password is required to submit a correction.")}function selectOption(e){const t=e.closest(".question"),o=t.querySelectorAll(".option"),n=Array.from(document.querySelectorAll(".question")).indexOf(t),s=currentQuestions[n];o[0].classList.contains("correct")||o[0].classList.contains("incorrect")||(o.forEach((e=>{e.classList.remove("selected")})),e.classList.add("selected"),e.dataset.value===s.correct_answer?(e.classList.add("correct"),score++):(e.classList.add("incorrect"),o.forEach((e=>{e.dataset.value===s.correct_answer&&e.classList.add("correct")}))),updateScore())}function updateScore(){const e=document.querySelectorAll(".option.correct, .option.incorrect").length;document.getElementById("score").textContent=`Current Score: ${score} out of ${e}`}document.querySelectorAll(".question-count-btn").forEach((e=>{e.addEventListener("click",(()=>{document.querySelectorAll(".question-count-btn").forEach((e=>e.classList.remove("selected"))),e.classList.add("selected"),selectedQuestionCount=parseInt(e.dataset.count)}))})),document.querySelector('.question-count-btn[data-count="5"]').classList.add("selected"),subtopicSelect.addEventListener("click",(e=>{if(e.target.classList.contains("subtopic-option")){document.querySelectorAll(".subtopic-option").forEach((e=>{e.classList.remove("selected")})),e.target.classList.add("selected");const t=e.target.dataset.value;console.log("Selected subtopic:",t)}}));let isSubmitting=!1;function submitQuiz(){submitQuizAndRedirect()}function submitQuizAndRedirect(){if(isSubmitting)return;isSubmitting=!0,clearInterval(timerInterval);const e=currentQuestions.length-document.querySelectorAll(".question:has(.option.correct), .question:has(.option.incorrect)").length;e>0&&alert(`Time's up! You have ${e} unanswered question(s). These will be marked as incorrect.`);const t=document.getElementById("topic").value,o=document.querySelector(".subtopic-option.selected"),n=o?o.dataset.value:"",s=o?o.dataset.info:"No info available",i=prompt("Please enter the admin password to submit the quiz:");if(!i)return alert("Password is required to submit the quiz."),void(isSubmitting=!1);fetch("/api/questions/submit-result",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t,subtopic:n,subs:currentQuestions[0]?.subs,score:score,totalQuestions:currentQuestions.length,info:s,password:i})}).then((e=>e.json())).then((e=>{console.log("Result saved:",e),switchTab("dashboard")})).catch((e=>{console.error("Error saving result:",e)})).finally((()=>{isSubmitting=!1})),window.location.href="/"}function showResults(){results.style.display="block",document.getElementById("finalScore").textContent=`Final Score: ${score} out of ${currentQuestions.length}`}function restartQuiz(){clearInterval(timerInterval),results.style.display="none",quiz.style.display="none",setup.style.display="block",document.getElementById("score").textContent="",document.getElementById("finalScore").textContent="",document.getElementById("timeRemaining").textContent="",document.getElementById("timerBar").value=100}const quizTab=document.getElementById("quizTab"),dashboardTab=document.getElementById("dashboardTab"),quizContent=document.getElementById("quizContent"),dashboardContent=document.getElementById("dashboardContent"),dashboardData=document.getElementById("dashboardData"),converterTab=document.getElementById("converterTab"),converterContent=document.getElementById("converterContent"),addQuestionTab=document.getElementById("addQuestionTab"),addQuestionContent=document.getElementById("addQuestionContent");quizTab.addEventListener("click",(()=>switchTab("quiz"))),dashboardTab.addEventListener("click",(()=>switchTab("dashboard"))),converterTab.addEventListener("click",(()=>switchTab("converter"))),addQuestionTab.addEventListener("click",(()=>switchTab("addQuestion")));const topicFilter=document.createElement("select");topicFilter.id="topicFilter",topicFilter.innerHTML='<option value="">All Topics</option>';const subtopicFilter=document.createElement("select");async function populateTopicFilter(){try{const e=await fetch("/api/questions/dashboard-topics"),t=await e.json();topicFilter.innerHTML='<option value="">All Topics</option>',t.forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,topicFilter.appendChild(t)})),dashboardContent.insertBefore(subtopicFilter,dashboardData),dashboardContent.insertBefore(topicFilter,subtopicFilter)}catch(e){console.error("Error fetching dashboard topics:",e)}}async function populateSubtopicFilter(e){try{const t=await fetch(`/api/questions/dashboard-subtopics/${e}`),o=await t.json();subtopicFilter.innerHTML='<option value="">All Subtopics</option>',o.forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,subtopicFilter.appendChild(t)})),subtopicFilter.disabled=!1}catch(e){console.error("Error fetching dashboard subtopics:",e)}}async function fetchDashboardData(){try{const e=topicFilter.value,t=subtopicFilter.value;let o="/api/questions/dashboard";e&&(o+=`/${e}`,t&&(o+=`/${t}`));const n=await fetch(o);if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const s=await n.json();console.log("Fetched dashboard data:",s),displayDashboardData(s)}catch(e){console.error("Error fetching dashboard data:",e),dashboardData.innerHTML="<p>Error loading dashboard data. Please try again later.</p>"}}function switchTab(e){quizTab.classList.remove("active"),dashboardTab.classList.remove("active"),converterTab.classList.remove("active"),addQuestionTab.classList.remove("active"),quizContent.style.display="none",dashboardContent.style.display="none",converterContent.style.display="none",addQuestionContent.style.display="none","quiz"===e?(quizTab.classList.add("active"),quizContent.style.display="block"):"dashboard"===e?(dashboardTab.classList.add("active"),dashboardContent.style.display="block",populateTopicFilter(),fetchDashboardData()):"converter"===e?(converterTab.classList.add("active"),converterContent.style.display="block"):"addQuestion"===e&&(addQuestionTab.classList.add("active"),addQuestionContent.style.display="block",addQuestionContent.innerHTML='<iframe src="add_question/index.html" width="100%" height="600px" frameborder="0"></iframe>')}function displayDashboardData(e){if(console.log("Displaying dashboard data:",e),!e||0===e.length)return void(dashboardData.innerHTML="<p>No quiz results available.</p>");e.sort(((e,t)=>new Date(t.timestamp)-new Date(e.timestamp)));const t=e.reduce(((e,t)=>{const o=`${t.topic}-${t.subtopic}-${t.subs}`;return e[o]||(e[o]=[]),e[o].push(t),e}),{}),o=document.getElementById("chartsContainer");o.innerHTML="",Object.entries(t).forEach((([e,t])=>{const[n,s,i]=e.split("-");t.sort(((e,t)=>new Date(t.timestamp)-new Date(e.timestamp)));const a=t.map((e=>new Date(e.timestamp).toLocaleString())),c=t.map((e=>e.score/e.totalQuestions*100)),r=document.createElement("canvas");r.id=`chart-${e}`,o.appendChild(r);const l=t[0].info||"No info available";console.log("Chart info:",t[0].info);const d=r.getContext("2d");new Chart(d,{type:"line",data:{labels:a,datasets:[{label:`Quiz Scores for ${n} - ${l}`,data:c,borderColor:"rgba(75, 192, 192, 1)",backgroundColor:"rgba(75, 192, 192, 0.2)",fill:!0,tension:.1}]},options:{scales:{x:{title:{display:!0,text:"Time"},reverse:!0},y:{title:{display:!0,text:"Score Percentage"},beginAtZero:!0,max:100}},plugins:{tooltip:{callbacks:{label:function(e){const o=e.dataIndex,n=t[o],s=c[o].toFixed(2);return`${n.score} / ${n.totalQuestions} (${s}%)`}}}}}})}))}function initializePage(){switchTab("quiz"),fetchTopics()}function startTimer(){quizStartTime=Date.now(),quizDuration=60*currentQuestions.length*1e3,updateTimerDisplay(),timerInterval=setInterval(updateTimerDisplay,1e3)}function updateTimerDisplay(){const e=Date.now()-quizStartTime,t=Math.max(quizDuration-e,0),o=Math.floor(t/6e4),n=Math.floor(t%6e4/1e3);document.getElementById("timeRemaining").textContent=`Time Remaining: ${o}:${n.toString().padStart(2,"0")}`;const s=t/quizDuration*100;document.getElementById("timerBar").value=s,t<=0&&(clearInterval(timerInterval),submitQuizAndRedirect())}function setupStickyTimer(){const e=document.querySelector(".sticky-timer");new IntersectionObserver((([e])=>e.target.classList.toggle("stuck",e.intersectionRatio<1)),{threshold:[1]}).observe(e)}function deleteQuestion(e){const t=prompt("Please enter the admin password to delete this question:");if(!t)return void alert("Password is required to delete a question.");const o=topicSelect.value,n=document.querySelector(".subtopic-option.selected"),s=n?n.dataset.value:"";fetch("/api/questions/delete-question",{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({questionId:e,topic:o,subtopic:s,password:t})}).then((e=>e.ok?e.json():e.json().then((e=>{throw new Error(e.message||"Unknown error occurred")})))).then((t=>{console.log("Question deleted successfully:",t),alert("Question deleted successfully!"),currentQuestions=currentQuestions.filter((t=>t._id!==e)),displayQuestions(),updateQuizState()})).catch((e=>{console.error("Error deleting question:",e),alert(`Failed to delete question: ${e.message}`)}))}function updateQuizState(){score=0,updateScore(),0===currentQuestions.length&&(alert("All questions have been deleted. The quiz will end now."),submitQuiz())}function loadDashboard(){fetch("/api/dashboard/progress").then((e=>e.json())).then((e=>{console.log("Dashboard data:",e);const t=document.getElementById("topic-progress");t.innerHTML="",e.forEach((e=>{const o=document.createElement("div");o.className="topic-progress",o.innerHTML=`\n                    <h3>${e.name}</h3>\n                    <p>Overall Average Score: ${e.overallAverageScore.toFixed(2)}%</p>\n                    <div class="progress-bar">\n                        <div class="progress" style="width: ${e.overallAverageScore}%"></div>\n                    </div>\n                `;const n=document.createElement("ul");e.subtopics.forEach((e=>{const t=document.createElement("li");t.innerHTML=`\n                        <strong>${e.name}</strong>\n                        <p>Info: ${e.info||"No info available"}</p>\n                        <p>Average Score: ${e.averageScore.toFixed(2)}%</p>\n                    `,n.appendChild(t)})),o.appendChild(n),t.appendChild(o)}))})).catch((e=>console.error("Error loading dashboard:",e)))}function submitQuiz(){const e=document.getElementById("topic-select").value,t=document.getElementById("subtopic-select").value,o=correctAnswers,n=questions.length,s=document.getElementById("subtopic-select").options[document.getElementById("subtopic-select").selectedIndex],i=s?s.getAttribute("data-info"):null;console.log("Submitting quiz result:",{topic:e,subtopic:t,score:o,totalQuestions:n,info:i}),fetch("/api/questions/submit-result",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:e,subtopic:t,score:o,totalQuestions:n,info:i})}).then((e=>{if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return e.json()})).then((e=>{console.log("Result saved:",e)})).catch((e=>{console.error("Error:",e)}))}subtopicFilter.id="subtopicFilter",subtopicFilter.innerHTML='<option value="">All Subtopics</option>',subtopicFilter.disabled=!0,topicFilter.addEventListener("change",(e=>{const t=e.target.value;t?populateSubtopicFilter(t):(subtopicFilter.innerHTML='<option value="">All Subtopics</option>',subtopicFilter.disabled=!0),fetchDashboardData()})),subtopicFilter.addEventListener("change",fetchDashboardData),document.addEventListener("DOMContentLoaded",initializePage),document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("topic"),t=document.getElementById("subtopic");fetch("/api/questions/topics").then((e=>e.json())).then((t=>{e.innerHTML='<option value="" disabled selected>Select a topic</option>',t.forEach((t=>{const o=document.createElement("option");o.value=t.name,o.textContent=`${t.name} (${t.count} questions)`,e.appendChild(o)}))})).catch((e=>{console.error("Error fetching topics:",e)})),e.addEventListener("change",(function(){const o=e.value;t.innerHTML="",t.disabled=!0,o&&fetch(`/api/questions/subtopics/${o}`).then((e=>e.json())).then((e=>{if(Object.keys(e).length>0){const n=new Set;for(const[s,i]of Object.entries(e)){const e=document.createElement("span");e.textContent=`Subset: ${s} - ${groupInfo}`,subsetContainer.appendChild(e);const a=createDeleteButton(s,o);subsetContainer.appendChild(a),t.appendChild(subsetContainer),i.forEach((e=>{if(!n.has(e.name)){const o=document.createElement("div");o.className="subtopic-option",o.dataset.value=e.name,o.textContent=`Start - Quiz ${e.name} (${e.count} questions)`,e.info&&(o.dataset.info=e.info),t.appendChild(o),n.add(e.name)}}))}t.disabled=!1}else{const e=document.createElement("div");e.className="subtopic-option",e.dataset.value="default",e.textContent="No subtopics available",t.appendChild(e)}}))}))})),topicFilter.addEventListener("change",fetchDashboardData),subtopicSelect.addEventListener("click",(e=>{if(e.target.classList.contains("subtopic-option")){const t=e.target.dataset.value;console.log("Selected subtopic:",t)}})),document.addEventListener("DOMContentLoaded",(()=>{console.log("DOM fully loaded");const e=document.getElementById("startQuiz");e?(console.log("Start button found"),e.addEventListener("click",(()=>{console.log("Start button clicked"),startQuiz()}))):console.error("Start button not found")})),document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelectorAll(".tab-button"),t=document.querySelectorAll(".tab-content");e.forEach((o=>{o.addEventListener("click",(()=>{const n=o.getAttribute("data-tab");e.forEach((e=>e.classList.remove("active"))),t.forEach((e=>e.classList.remove("active"))),o.classList.add("active"),document.getElementById(`${n}-tab`).classList.add("active"),"dashboard"===n&&loadDashboard()}))}))})),document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("converterForm"),t=document.getElementById("result"),o=document.getElementById("topicSelect"),n=document.getElementById("newTopic"),s=document.getElementById("subtopicSelect"),i=document.getElementById("newSubtopic"),a=document.getElementById("previewButton"),c=document.getElementById("previewArea"),r=document.getElementById("jsonPreview"),l=document.getElementById("saveButton"),d=document.getElementById("editButton"),u=document.getElementById("questionCountSlider"),p=document.getElementById("questionCountValue"),m=document.getElementById("questionContainer");let b=null;async function h(){try{const e=await fetch("/api/questions/topics"),t=await e.json();o.innerHTML='<option value="">Select or create a topic</option>',t.forEach((e=>{const t=document.createElement("option");t.value=e.name,t.textContent=e.name,o.appendChild(t)})),console.log("Fetched topics:",t)}catch(e){console.error("Error fetching topics:",e)}}async function v(e){try{const t=await fetch(`/api/questions/subtopics/${e}`),o=await t.json();s.innerHTML='<option value="">Select or create a subtopic</option>';let n=document.getElementById("subtopicsInfo");n||(n=document.createElement("div"),n.id="subtopicsInfo",s.parentNode.insertBefore(n,s.nextSibling)),n.style.color="indianred",n.style.padding="15px",n.style.fontWeight="bold","object"==typeof o&&null!==o?(n.innerHTML="<h3>Subtopics:</h3>",Object.entries(o).forEach((([e,t])=>{const o=t[0].info||"No info available",i=document.createElement("div");i.innerHTML=`<p>${e} - ${o}</p>`,n.appendChild(i);const a=document.createElement("option");a.value=e,a.textContent=e,s.appendChild(a)}))):(n.innerHTML="<h3>No subtopics available</h3>",console.warn("Subtopics response is not an object:",o)),console.log("Fetched subtopics for topic",e,":",o)}catch(e){console.error("Error fetching subtopics:",e)}}function g(){const e=parseInt(u.value);m.innerHTML="";for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("question-field"),e.innerHTML=`\n                <label for="questionText${t}">Question ${t+1}:</label>\n                <textarea id="questionText${t}" rows="2" required></textarea>\n\n                <label for="optionA${t}">Option A:</label>\n                <input type="text" id="optionA${t}" required>\n\n                <label for="optionB${t}">Option B:</label>\n                <input type="text" id="optionB${t}" required>\n\n                <label for="optionC${t}">Option C:</label>\n                <input type="text" id="optionC${t}" required>\n\n                <label for="optionD${t}">Option D:</label>\n                <input type="text" id="optionD${t}" required>\n\n                <label for="correctAnswer${t}">Correct Answer:</label>\n                <select id="correctAnswer${t}">\n                    <option value="a">a</option>\n                    <option value="b">b</option>\n                    <option value="c">c</option>\n                    <option value="d">d</option>\n                </select>\n            `,m.appendChild(e)}}h(),o.addEventListener("change",(()=>{o.value?(v(o.value),s.disabled=!1):(s.innerHTML='<option value="">Select or create a subtopic</option>',s.disabled=!0)})),u.addEventListener("input",(()=>{p.textContent=u.value,g()})),a.addEventListener("click",(()=>{const t=i.value||s.value;b=function(e){const t=parseInt(u.value),o=[],n=prompt("Enter information about this subtopic (optional):");for(let s=0;s<t;s++){const t=document.getElementById(`questionText${s}`).value.trim(),i=document.getElementById(`optionA${s}`).value.trim(),a=document.getElementById(`optionB${s}`).value.trim(),c=document.getElementById(`optionC${s}`).value.trim(),r=document.getElementById(`optionD${s}`).value.trim(),l=document.getElementById(`correctAnswer${s}`).value;if(t&&i&&a&&c&&r){const s={question_id:o.length+1,subs:parseInt(e)||1,info:n,question_text:t,options:[{text:`a) ${i}`,value:"a"},{text:`b) ${a}`,value:"b"},{text:`c) ${c}`,value:"c"},{text:`d) ${r}`,value:"d"}],correct_answer:l};o.push(s)}}return o}(t);const o=parseInt(u.value),n=b.length;n<o&&alert(`You selected ${o} questions, but only ${n} are completely filled out. Only the filled questions will be saved.`),r.textContent=JSON.stringify(b,null,2),e.style.display="none",c.style.display="block"})),d.addEventListener("click",(()=>{e.style.display="block",c.style.display="none"})),l.addEventListener("click",(async()=>{const a=n.value||o.value,r=i.value||s.value;if(!a||!r)return void(t.innerHTML="<p>Error: Please select or create both a topic and subtopic.</p>");const l=prompt("Please enter the admin password to save the data:");if(l)try{console.log("Saving JSON data:",{topicName:a,subtopicName:r,currentJsonData:b});const n=await fetch("/api/questions/save-json",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topicName:a,subtopicName:r,jsonData:b,password:l})});if(!n.ok){const e=await n.json();throw new Error(e.error||"Failed to save JSON data")}const s=await n.json();console.log("Server response:",s),t.innerHTML=`<p>${s.message}</p>`,h(),o.value&&v(o.value),e.style.display="block",c.style.display="none"}catch(e){console.error("Error saving JSON data:",e),t.innerHTML=`<p>Error: ${e.message}</p>`}else t.innerHTML="<p>Error: Password is required to save data.</p>"})),g()}));